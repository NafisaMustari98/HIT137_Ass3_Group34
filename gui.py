# -*- coding: utf-8 -*-
"""Ass3_GUI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18OYnmbweF_86IxcLCufOkuB5nophsTGO
"""

import os
import tkinter as tk
from tkinter import ttk, scrolledtext, filedialog, messagebox
from PIL import Image, ImageTk
from models import AIModels
from decorators import uppercase, exclaim

class ModelInfo:
    @uppercase
    @exclaim
    def get_model_info(self):
        return "Available Models:\n1. Text Classifier\n2. Image Generator"

class Explanation:
    @exclaim
    def get_explanation(self):
        return "- Uses Transformers and Diffusers\n- OOP Structure\n- Decorators Demo"

class AIApp(tk.Tk, ModelInfo, Explanation):
    def __init__(self):
        super().__init__()
        self.title("AI Models GUI")
        self.geometry("1100x650")

        self.models = AIModels()
        self.selected_model = tk.StringVar(value="Select Model")

        self.create_menu()
        self.create_layout()

    def create_menu(self):
        menubar = tk.Menu(self)
        file_menu = tk.Menu(menubar, tearoff=0)
        file_menu.add_command(label="Exit", command=self.quit)
        menubar.add_cascade(label="File", menu=file_menu)

        model_menu = tk.Menu(menubar, tearoff=0)
        model_menu.add_command(label="Reload Models", command=self.reload_models)
        menubar.add_cascade(label="Models", menu=model_menu)

        help_menu = tk.Menu(menubar, tearoff=0)
        help_menu.add_command(label="About", command=self.show_about)
        menubar.add_cascade(label="Help", menu=help_menu)

        self.config(menu=menubar)

    def create_layout(self):
        # Top Frame for Model Selection
        top_frame = ttk.Frame(self)
        top_frame.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        ttk.Label(top_frame, text="Select Model:").pack(side=tk.LEFT)
        model_options = ["Text Classifier", "Image Generator"]
        ttk.Combobox(top_frame, textvariable=self.selected_model, values=model_options, state="readonly").pack(side=tk.LEFT, padx=5)
        ttk.Button(top_frame, text="Load Model", command=self.load_model).pack(side=tk.LEFT, padx=5)

        # Main Paned Window for side-by-side layout
        paned = ttk.PanedWindow(self, orient=tk.HORIZONTAL)
        paned.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Left Frame for Input
        input_frame = ttk.LabelFrame(paned, text="User Input")
        paned.add(input_frame, weight=1)

        self.input_text = scrolledtext.ScrolledText(input_frame, height=20)
        self.input_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        ttk.Button(input_frame, text="Run Model 1", command=self.run_model1).pack(side=tk.LEFT, padx=5, pady=5)
        ttk.Button(input_frame, text="Run Model 2", command=self.run_model2).pack(side=tk.LEFT, padx=5, pady=5)

        # Right Frame for Output
        output_frame = ttk.LabelFrame(paned, text="Model Output")
        paned.add(output_frame, weight=1)

        self.output_text = scrolledtext.ScrolledText(output_frame, height=20)
        self.output_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        self.output_image_label = ttk.Label(output_frame)
        self.output_image_label.pack(padx=5, pady=5)

        # Bottom Frame for Info and Notes
        bottom_frame = ttk.Frame(self)
        bottom_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=5)

        info_frame = ttk.LabelFrame(bottom_frame, text="Selected Model Info")
        info_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        self.model_info_label = tk.Label(info_frame, text=self.get_model_info(), justify=tk.LEFT)
        self.model_info_label.pack(padx=5, pady=5)

        explanation_frame = ttk.LabelFrame(bottom_frame, text="OOP Explanation")
        explanation_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        self.explanation_label = tk.Label(explanation_frame, text=self.get_explanation(), justify=tk.LEFT)
        self.explanation_label.pack(padx=5, pady=5)

        notes_frame = ttk.LabelFrame(bottom_frame, text="Notes")
        notes_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5)
        self.notes_text = scrolledtext.ScrolledText(notes_frame, height=5)
        self.notes_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

    def load_model(self):
        messagebox.showinfo("Load Model", f"Model '{self.selected_model.get()}' loaded!")

    def run_model1(self):
        user_input = self.input_text.get("1.0", tk.END).strip()
        if self.selected_model.get() == "Text Classifier":
            result = self.models.classify_text(user_input)
            self.output_text.delete("1.0", tk.END)
            self.output_text.insert(tk.END, str(result))
        elif self.selected_model.get() == "Image Generator":
            img_path = self.models.generate_image(user_input)
            self.show_image(img_path)

    def run_model2(self):
        # For demo, run same as model1 or implement another logic
        self.run_model1()

    def show_image(self, img_path):
        img = Image.open(img_path)
        img.thumbnail((400, 400))
        self.img_tk = ImageTk.PhotoImage(img)
        self.output_image_label.config(image=self.img_tk)

    def reload_models(self):
        self.models._init_models()
        messagebox.showinfo("Models Reloaded", "AI models have been reloaded.")

    def show_about(self):
        messagebox.showinfo("About", "AI Models GUI\nBy Nafisa Mustari")